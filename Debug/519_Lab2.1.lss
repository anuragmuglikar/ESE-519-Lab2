
519_Lab2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072e  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000649  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d5  00000000  00000000  00000faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000362  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000016ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_10>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 89 00 	call	0x112	; 0x112 <main>
  78:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pollButton>:
 * Created: 11-09-2018 22:16:30
 *  Author: Anurag Muglikar
 */ 

void pollButton(){
	if(!(PINB & 0x01)){			//true if input PB0 goes low.
  80:	18 99       	sbic	0x03, 0	; 3
  82:	02 c0       	rjmp	.+4      	; 0x88 <pollButton+0x8>
		PORTB |= 0x20;			//0b00100000; sets high output
  84:	2d 9a       	sbi	0x05, 5	; 5
  86:	08 95       	ret
		}else{
		PORTB &= 0b11011111;	// sets output low. preserving other pins.
  88:	2d 98       	cbi	0x05, 5	; 5
  8a:	08 95       	ret

0000008c <timer0_init>:
	}
}

void timer0_init()
{
	TCCR0B |= (1 << CS01);	// timer with no pre-scaling
  8c:	85 b5       	in	r24, 0x25	; 37
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;		// start counter
  92:	16 bc       	out	0x26, r1	; 38
  94:	08 95       	ret

00000096 <letsBuzz>:
}

void letsBuzz(){
	if (TCNT0 >= 250)
  96:	86 b5       	in	r24, 0x26	; 38
  98:	8a 3f       	cpi	r24, 0xFA	; 250
  9a:	28 f0       	brcs	.+10     	; 0xa6 <letsBuzz+0x10>
	{
		PORTD ^= (1 << 6);
  9c:	9b b1       	in	r25, 0x0b	; 11
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	89 27       	eor	r24, r25
  a2:	8b b9       	out	0x0b, r24	; 11
		TCNT0 = 0;            // reset counter
  a4:	16 bc       	out	0x26, r1	; 38
  a6:	08 95       	ret

000000a8 <init_interrupts>:
	}
}

void init_interrupts(){
		
	TCCR1B |= 0b00000001; //setting the prescaler to 1.
  a8:	e1 e8       	ldi	r30, 0x81	; 129
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	80 83       	st	Z, r24
	TCCR1B |= 0b00000000; //Enabling ICES1 (7) to detect a falling edge
  b2:	80 81       	ld	r24, Z
  b4:	80 83       	st	Z, r24
	TIMSK1 = 0b00100000; //Enable ICEI pin
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();				// Enable global interrupt
  bc:	78 94       	sei
  be:	08 95       	ret

000000c0 <__vector_10>:
	

}

ISR(TIMER1_CAPT_vect){
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	PORTB ^= 1 << 5;
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	89 27       	eor	r24, r25
  d8:	85 b9       	out	0x05, r24	; 5
	TCCR1B ^= 1 << 6;	//setting ICES Pin to detect a rising edge so that the same pin can be toggle back when button is released.
  da:	e1 e8       	ldi	r30, 0x81	; 129
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	80 e4       	ldi	r24, 0x40	; 64
  e2:	89 27       	eor	r24, r25
  e4:	80 83       	st	Z, r24
}
  e6:	ff 91       	pop	r31
  e8:	ef 91       	pop	r30
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <init>:
#include <avr/interrupt.h>
#include "functions.h"


void init(){
	DDRB = 0x20;	//0b00100000; PB5 => Output // Setting the input high on DDR makes the pin OP.
  f8:	80 e2       	ldi	r24, 0x20	; 32
  fa:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x01;	//Writing something on the input pins, will take them to internal pull up.
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	85 b9       	out	0x05, r24	; 5
	DDRD = 0b01000000;
 100:	80 e4       	ldi	r24, 0x40	; 64
 102:	8a b9       	out	0x0a, r24	; 10
	PORTB |= 0b00000000;
 104:	85 b1       	in	r24, 0x05	; 5
 106:	85 b9       	out	0x05, r24	; 5
	timer0_init();
 108:	0e 94 46 00 	call	0x8c	; 0x8c <timer0_init>
	init_interrupts();
 10c:	0e 94 54 00 	call	0xa8	; 0xa8 <init_interrupts>
 110:	08 95       	ret

00000112 <main>:
}
int main(void)
{
	/* Replace with your application code */
	init();
 112:	0e 94 7c 00 	call	0xf8	; 0xf8 <init>
	while (1)
	{
		pollButton();
 116:	0e 94 40 00 	call	0x80	; 0x80 <pollButton>
		letsBuzz();
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <letsBuzz>
 11e:	fb cf       	rjmp	.-10     	; 0x116 <main+0x4>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
